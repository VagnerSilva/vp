@use 'sass:math';

// Calculate the difference in degrees between two angles.
/// @param {number} $a - The first angle in degrees
/// @param {number} $b - The second angle in degrees
/// @return {number} - The angular difference in degrees
@function difference-degrees($a, $b) {
  $result: 180 - math.abs(math.abs($a - $b) - 180);

  @return $result;
}

// Perform linear interpolation between two values.
/// @param {number} $start - The starting value
/// @param {number} $stop - The ending value
/// @param {number} $amount - The interpolation amount (0 to 1)
/// @return {number} - The interpolated value
@function lerp($start, $stop, $amount) {
    @return (1 - $amount) * $start + $amount * $stop;
}


// Multiply a row vector by a 3x3 matrix.
/// @param {list} $row - The row vector
/// @param {list} $matrix - The 3x3 matrix
/// @return {list} - The resulting vector
@function matrix-multiply($row, $matrix) {
  $a: nth($row, 1) * nth(nth($matrix, 1), 1) + 
        nth($row, 2) * nth(nth($matrix, 1), 2) + 
        nth($row, 3) * nth(nth($matrix, 1), 3);
  $b: nth($row, 1) * nth(nth($matrix, 2), 1) + 
        nth($row, 2) * nth(nth($matrix, 2), 2) + 
        nth($row, 3) * nth(nth($matrix, 2), 3);
  $c: nth($row, 1) * nth(nth($matrix, 3), 1) + 
        nth($row, 2) * nth(nth($matrix, 3), 2) + 
        nth($row, 3) * nth(nth($matrix, 3), 3);

      
  @return ($a, $b, $c);
}

// Determine the sign of a number.
/// @param {number} $num - The input number
/// @return {number} - The sign of the input (-1 for negative, 0 for zero, 1 for positive)
@function signum($num) {
    @if ($num < 0) {
      @return -1;
    }
  
   @else if ($num == 0) {
      @return 0;
    }
  
   @else {
      @return 1;
    }
}


// Clamp an integer value within a specified range.
/// @param {number} $min - The minimum allowed value
/// @param {number} $max - The maximum allowed value
/// @param {number} $input - The input value
/// @return {number} - The clamped value within the specified range
@function clamp-int($min, $max, $input) {
    @if ($input < $min) {
      @return $min;
    }

    @else if ($input > $max) {
      @return $max;
    }
  
    @return $input;
}

// Ensure that an angle in degrees is within the range [0, 360).
/// @param {number} $degrees - The input angle in degrees
/// @return {number} - The sanitized angle within the specified range
@function sanitize-degrees-double($degrees) {
    $degrees: $degrees % 360;

    @if ($degrees < 0) {
      $degrees: $degrees + 360;
    }

    @return $degrees;
}

// Determine the rotation direction between two angles in degrees.
/// @param {number} $from - The starting angle in degrees
/// @param {number} $to - The target angle in degrees
/// @return {number} - The rotation direction (-1 for decreasing, 1 for increasing)
@function rotation-direction($from, $to) {
  $increasing-difference: sanitize-degrees-double($to - $from);

  @if $increasing-difference <= 180 {
    @return 1;
  }

 @else {
    @return -1;
  }
}
