@forward './helpers/string_util'; 
@forward './helpers/theme_util';

@use 'sass:map';
@use './util' as vp-util;
@use './material' as vp-material;


/// Create a custom theme based on a color and a source palette.
/// @param $name - The name of the custom theme.
/// @param $color - The base color for the custom theme in hex format.
/// @param $source - The source palette to harmonize the color with.
/// @return - A map containing custom themes for 'light' and 'dark' modes.
@function _create-custom-theme($name, $color,  $source) {
  @if $color {
    $color: vp-util.argb-from-hex($color);
    $palette: vp-material.of(vp-material.harmonize($color, $source));

    @return (schemes: ( 
      light: vp-material.custom-tones($name, $palette, 'light', true),
      dark:  vp-material.custom-tones($name, $palette, 'dark', true)
    ));
  }
  
  @else {
    @return false;
  }
}


/// Get a specific palette color from a source palette.
///
/// @param $paletteColor - The color in the palette in hex format.
/// @param $type - The type of the palette color (e.g., 'a1').
///
/// @return - The specified palette color in ARGB format.
@function _get-palette($paletteColor, $type: a1) {

  @if $paletteColor {

    @return map.get(vp-material.of(vp-util.argb-from-hex($paletteColor)), $type);
  }

  @else {

    @return false;
  }
}


/// Define and apply themes based on the given theme data.
/// @param $theme - A map containing theme data.
@mixin themes($theme) {

  $primary: map.get($theme, primary);
  $secondary: map.get($theme, secondary);
  $tertiary: map.get($theme, tertiary);
  $neutral: map.get($theme, neutral);
  $error: map.get($theme, error);
  $custom: map.get($theme, customColors);
  $source: vp-util.argb-from-hex($primary);
  $themes: vp-util.theme-from-source-color($source, $custom);
  $palettes: (
    secondary: _get-palette($secondary),
    tertiary: _get-palette($tertiary),
    neutral:  _get-palette($neutral),
    neutralVariant: _get-palette($neutral, a2),
    error: _get-palette($error)
  );

  $customSecondary: _create-custom-theme('secondary', $secondary, $source);
  $customTertiary: _create-custom-theme('tertiary', $tertiary, $source);
  $customNeutral: _create-custom-theme('neutral', $neutral, $source);
  $customError: _create-custom-theme('error', $error, $source);
  
  $customThemes: (
    $customSecondary,
    $customTertiary,
    $customNeutral,
    $customError
  );


  @each $customTheme in $customThemes {
    @if $customTheme {
      $light: map.get($customTheme, schemes, light);
      $dark:  map.get($customTheme, schemes, dark);
      $themes: map.merge($themes, (schemes: (
        light: map.merge(map.get($themes, schemes, light), $light),
        dark: map.merge(map.get($themes, schemes, dark), $dark)
      )));
    }
  }

 
  @each $key, $value in $palettes {
    @if $value {
      $themes: map.merge($themes, (palettes: map.merge(map.get($themes, palettes), ($key: $value))));
    }
  }

  @include vp-util.apply-theme($themes, (
    target: body,
    paletteTones: true,
  ));

}
